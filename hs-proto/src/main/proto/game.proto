syntax = "proto3";
package game;

option java_package = "org.zebig.hs.protobuf";
option java_outer_classname = "GameProto";


/* Client to server messages */

message Auth {
  string token = 1;             // for authentication
  string client_version = 2;    // not yet implemented
}

/* Client asks the server to create a game or find a game with a waiting player */
message JoinGame {
    string mode = 1; // possible values : "casual" or "ranked"
    string hero_name = 2;
    string deck_name = 3;
}

/* only once during mulligan phase */
message Mulligan {
    string match_id = 1;
    repeated string card_id = 2;
}

/* sent by the active player, during play phase */
message PlayCard {
    string match_id = 1;
    string card_id = 2;
    uint32 action_seq = 3;
    string target_id = 4;   // if the played card requires a target
    uint32 choice_num = 5;  // if the played card requires a choice number
    uint32 position = 6;    // for minions, the place on the board
}

/*  sent by the active player, during play phase
    attack by a player's minion
*/
message MinionAttack {
    string match_id = 1;
    string card_id = 2;      // the minion that attacks; must be in player's board and being able to attack
    string target_id = 3;    // the target of attack, = H if opponent's hero or a card_id for a minion in the opponent's board
}

/*  sent by the active player, during play phase,
    attack by the player's hero
*/
message HeroAttack {
    string match_id = 1;
    string target_id = 2;    // the target of attack, = H if opponent's hero or a card_id for a minion in the opponent's board
}

/*  sent by the active player, during play phase,
    use player's hero power
*/
message UseHeroPower {
    string match_id = 1;
    string target_id = 2;    // h = player's hero, H = opponent's hero, else card_id (on board)
}

/*  sent by any player, during play phase,
    concede the game (accept defeat)
*/
message ConcedeGame {
    string match_id = 1;
    string target_id = 2;    // h = player's hero, H = opponent's hero, else card_id (on board)
}

message ClientMessage {
    oneof payload {
        Auth auth = 1;
        JoinGame join_game = 2;
        PlayCard play_card = 3;
        MinionAttack minion_attack = 4;
        HeroAttack hero_attack = 5;
        UseHeroPower use_hero_power = 6;
        ConcedeGame concede_game = 7;
    }
}

/* Server to client messages */

message MatchJoined {
  string match_id = 1;
}

/* the full state of a card in hand or on board */
message CardDetail {
    string card_id = 1;
    string card_name = 2;
    string card_text = 3;
    uint64 attack_power = 4;
    uint64 health = 5;
    bool frozen = 6;
    bool can_attack = 7;
}

/* weapon health, attack power, effects */
message WeaponDetail {
    string card_id = 1; // the card that created it if any
    uint32 health = 2;
    uint32 attack_power = 3;
}

/* health, armour, mana, hand size, weapon, state (e.g. frozen), deck size, secret count */
message HeroDetail {
    string hero_name = 1;
    uint32 health = 2;
    uint32 attack_power = 3;
    uint32 mana_max = 4;
    uint32 mana_free = 5;
    uint32 mana_overload = 6;
    bool can_attack = 7;
    uint32 deck_size = 8;
    uint32 fatigue = 9;
    uint32 secret_count = 10;
}

message BoardDetail {
    repeated string card_id = 1;
    repeated CardDetail card_details = 3;
}

message HandDetail {
    repeated string card_id = 1;
    repeated CardDetail card_details = 3;
}

message SecretsDetail {
    repeated string card_id = 1;
    repeated CardDetail card_details = 3;
}

/* for a full refresh of the game state */
message GameState {
    HeroDetail your_hero = 1;
    HeroDetail opp_hero = 2;
    HandDetail your_hand = 3;
    WeaponDetail your_weapon = 4;
    WeaponDetail opp_weapon = 5;
    BoardDetail your_board = 6;
    BoardDetail opp_board = 7;
    SecretsDetail your_secrets = 8;
    bool your_turn = 9;
}

message Ack {
  string msg = 1;
  uint64 serverTime = 2;
}

// ðŸ”¥ A diff in game state
message GameEvent {
    string type = 1;                 // e.g. "DrawCard", "Summon", "Damage", "Death"
    map<string,string> data = 2;     // arbitrary keyâ†’value
    uint64 seq = 3;                  // server event sequence
}

message ServerMessage {
    string game_id = 1;
    oneof payload {
      Ack ack = 2;
      MatchJoined match_joined = 3;
      GameEvent event = 5;
  }
}
